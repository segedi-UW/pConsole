import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

public class ProgCall extends Callable {

	private LoadHandler loadHandler;
	private URLClassLoader classLoader;
	private Class<?> p;

	public ProgCall(String filename, LoadHandler loadHandler, Cons c) {
		super(filename, c);
		this.p = p;
		this.loadHandler = loadHandler;
	}

	@Override
	public void run(String[] args) {
		super.run(args);
		if (p == null) {
			c.errorln("No compiled program to run");
		} else {
			try {
				if (Prog.class.isAssignableFrom(p)) {
					Object o = p.getDeclaredConstructor().newInstance();
					Prog prog = (Prog)o;
					prog.connect(c, loadHandler, classLoader);
					try {
						prog.run(args);
					} catch (Exception e) {
						c.errorln("Prog raised exception: " + e.getMessage() + " from " + e.getCause());
						e.printStackTrace();
					}

				} else {
					c.errorln("Class does not inherit from Prog");
				}
			} catch (InstantiationException | IllegalAccessException
					| NoSuchMethodException | InvocationTargetException e) {
				c.errorln("Could not create class: " + e.getMessage());
			} catch (Exception e) {
				c.errorln("Unexpected error creating class: " + e.getMessage());
			} catch (Throwable e) {
				c.errorln("Dangerous error creating class: " + e.getMessage());
				System.err.println("ERROR: " + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	@Override
	public void load() {
		p = null;
		// compile
		Runtime rt = Runtime.getRuntime();
		try {
			if (this.classLoader != null)
				this.classLoader.close();
			String[] args = new String[2];
			args[0] = "javac";
			// NOTE the -d arg is necessary, as otherwise our
			// subclasses that are generated by the compilation
			// will be hidden in this directory - we will get a 
			// NoClassDefFound throwable
			//args[1] = "-d"; // specifies to place class files in base dir
			//args[2] = loadHandler.getBase().toString();
			args[1] = file.getAbsolutePath();
			Process comp = rt.exec(args);
			comp.waitFor();
			InputReader err = new InputReader(comp.getErrorStream(), c);
			InputReader out = new InputReader(comp.getInputStream(), c); 
			int ev = comp.exitValue();
			if (ev != 0) {
				c.errorln("Prog failed to load: " + err.toString());
				return;
			} else {
				c.println(out.toString());
			}
			
			this.classLoader = new URLClassLoader(
					new URL[]{file.getParentFile().toURI().toURL()}
				);
			p = this.classLoader.loadClass(file.getName().substring(0, file.getName().length()-5));
		} catch (InterruptedException e) {
			c.errorln("Compilation Terminated");
		} catch (IOException e) {
			c.errorln("Compilation Exception: " + e.getMessage());
		} catch (NullPointerException e) {
			c.errorln("NPE: File " + file.getAbsolutePath() + " may not have a parent directory");
		} catch (ClassNotFoundException e) {
			c.errorln("Class not found: " + e.getMessage());
		}
	}


}
